import config
import time
import telebot
import random
from telebot import types
import pandas as pd
from telebot import types
from datetime import date
import re
import openai

import os
import json

v_phone = ''
v_lastname = ''
v_firstname = ''
v_step = ''

NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")



bot = telebot.TeleBot(config.token)
##########users = [230946227,346573500]

hideBoard = types.ReplyKeyboardRemove()

file1 = '/usr/src/app/dockerdata/contact.xlsx'
xlsx = pd.ExcelFile(file1)
df1 = xlsx.parse('contact')


##########
users = {}
file_user_json = '/usr/src/app/dockerdata/users.json'
if os.path.exists(file_user_json):
    with open(file_user_json, "r") as f:
        users = json.load(f)

def _get_user(id):
    id = str(id)
    user = users.get(
        id, {'id': id, 'history': _get_clear_history(id), 'last_prompt_time': 0})
    users[id] = user
    return user
    
def _get_clear_history(user_id):
    current_date = time.strftime("%d.%m.%Y", time.localtime())
    common_start = f"""
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–≤–æ–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. 
–¢–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–º L1 –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ X –∏ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ L2.
–í –∫–æ–º–ø–∞–Ω–∏–∏ X –µ—Å—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä—ã L2 —Å–æ —Å–ª–µ–¥—É—é—â–∏–º–∏ –∫–æ–¥–∞–º–∏: "—Å11", "—Å4", "—Å5", "—Å6", "—Å7", "—Å8", "—Å9".
–ò–Ω–∂–µ–Ω–µ—Ä "—Å11" –∑–Ω–∞–µ—Ç IBM Cognos Analytics, IBM DB2, IBM Business Automation Workflow, IBM Datastage, IBM Information Server.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å11" –Ω–µ –∑–Ω–∞–µ—Ç IBM MQ.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å9" –∑–Ω–∞–µ—Ç IBM Cognos Analytics, IBM Master Data Management, IBM Planning Analytics, iLog Cplex, IBM Decision Optimisation.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å5" –∑–Ω–∞–µ—Ç IBM WebSphere Application Server, IBM Integration Designer.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å4" –∑–Ω–∞–µ—Ç IBM Qradar.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å6" –∑–Ω–∞–µ—Ç IBM WebSphere Application Server, IBM Filenet, IBM APP Connect, IBM DataPower, IBM MQ, IBM Qradar.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å7" –∑–Ω–∞–µ—Ç IBM Business Process Management, IBM ODM.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å8" –∑–Ω–∞–µ—Ç IBM WebSphere Application Server, IBM Business Automation Workflow, IBM Business Process Management, IBM Cloud Private.
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2 –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É.
–ï—Å–ª–∏ –≤ –∑–∞—è–≤–∫–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—Ä–æ—Å—å–±–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–π, —Ç–æ —Ç—ã –Ω–µ –æ–±—Ä–∞—â–∞–µ—à—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –ø—Ä–æ—Å—å–±—É.
–¢—ã –¥–∞–µ—à—å –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω—ã–µ –æ—Ç–≤–µ—Ç—ã, –æ–±—ã—á–Ω–æ –Ω–µ –±–æ–ª–µ–µ 2000 —Å–∏–º–≤–æ–ª–æ–≤. 
–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞–µ—à—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–Ω–∞–Ω–∏—è –∏ —Å–æ—Ñ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2.
–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—à—å –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É —Ç—ã —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞. 
–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—à—å –∫–æ–¥ –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2 –≤ –æ—Ç–≤–µ—Ç–µ.
–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, —Ç–æ –æ–¥–Ω–æ–º–æ–≥–æ –∏–∑ –Ω–∏—Ö –Ω–∞–¥–æ —è–≤–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
–°–µ–≥–æ–¥–Ω—è—à–Ω—è—è –¥–∞—Ç–∞: {current_date}."""
    return [{"role": "system", "content": f"""
–¢—ã –ø–æ–ª–µ–∑–Ω—ã–π –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç —Å –ò–ò, –∫–æ—Ç–æ—Ä—ã–π –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å —Å–≤–æ–µ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é. 
–¢–≤–æ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —è–≤–ª—è–µ—Ç—Å—è –∏–Ω–∂–µ–Ω–µ—Ä–æ–º L1 –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–æ–º–ø–∞–Ω–∏–∏ X –∏ –∑–∞–Ω–∏–º–∞–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º –∑–∞—è–≤–æ–∫ –Ω–∞ –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤ L2.
–í –∫–æ–º–ø–∞–Ω–∏–∏ X –µ—Å—Ç—å –∏–Ω–∂–µ–Ω–µ—Ä—ã L2: —Å11, —Å4, —Å5, —Å6, —Å7, —Å8, —Å9.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å11 –∑–Ω–∞–µ—Ç IBM Cognos Analytics, IBM DB2, IBM Business Automation Workflow, IBM Datastage, IBM Information Server.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å11 –Ω–µ –∑–Ω–∞–µ—Ç IBM MQ.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å9 –∑–Ω–∞–µ—Ç IBM Cognos Analytics, IBM Master Data Management, IBM Planning Analytics, iLog Cplex, IBM Decision Optimisation.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å5 –∑–Ω–∞–µ—Ç IBM WebSphere Application Server, IBM Integration Designer.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å4 –∑–Ω–∞–µ—Ç IBM Qradar.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å6 –∑–Ω–∞–µ—Ç IBM WebSphere Application Server, IBM Filenet, IBM APP Connect, IBM DataPower, IBM MQ, IBM Qradar.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å7 –∑–Ω–∞–µ—Ç IBM Business Process Management, IBM ODM.
–ò–Ω–∂–µ–Ω–µ—Ä "—Å8 –∑–Ω–∞–µ—Ç IBM WebSphere Application Server, IBM Business Automation Workflow, IBM Business Process Management, IBM Cloud Private.
–ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–≤ —Å–æ–æ–±—â–µ–Ω–∏—è —Ç–≤–æ–µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ—Å–æ–≤–µ—Ç–æ–≤–∞—Ç—å —Ä–µ—à–µ–Ω–∏–µ –∑–∞—è–≤–∫–∏ –∏ –ø–æ—Ä–µ–∫–æ–º–µ–Ω–¥–æ–≤–∞—Ç—å –Ω–∞ –∫–∞–∫–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2 –Ω–∞–∑–Ω–∞—á–∏—Ç—å –∑–∞—è–≤–∫—É.
–ï—Å–ª–∏ –≤ –∑–∞—è–≤–∫–µ –ø—Ä–∏—Ö–æ–¥–∏—Ç –ø—Ä–æ—Å—å–±–∞ –Ω–∞ –∞–Ω–∞–ª–∏–∑ —Ñ–∞–π–ª–æ–≤ –∏–ª–∏ –≤–ª–æ–∂–µ–Ω–∏–π, —Ç–æ —Ç—ã –Ω–µ –æ–±—Ä–∞—â–∞–µ—à—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —ç—Ç—É –ø—Ä–æ—Å—å–±—É.
–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –≤ –æ—Ç–≤–µ—Ç–µ —É–∫–∞–∑—ã–≤–∞–µ—à—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2, –∞ –Ω–µ —Ç–æ–ª—å–∫–æ –∑–Ω–∞–Ω–∏—è –∏ —Å–æ—Ñ—Ç –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2.
–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—à—å –ø—Ä–∏—á–∏–Ω—É, –ø–æ—á–µ–º—É —Ç—ã —É–∫–∞–∑–∞–ª –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ –∏–Ω–∂–µ–Ω–µ—Ä–∞.
–¢—ã –æ–±—è–∑–∞—Ç–µ–ª—å–Ω–æ —É–∫–∞–∑—ã–≤–∞–µ—à—å –∫–æ–¥ –∏–Ω–∂–µ–Ω–µ—Ä–∞ L2 –≤ –æ—Ç–≤–µ—Ç–µ.
–ï—Å–ª–∏ –µ—Å—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ –ø–æ–¥—Ö–æ–¥—è—â–∏—Ö –∏–Ω–∂–µ–Ω–µ—Ä–æ–≤, —Ç–æ –æ–¥–Ω–æ–º–æ–≥–æ –∏–∑ –Ω–∏—Ö –Ω–∞–¥–æ —è–≤–Ω–æ –≤—ã–¥–µ–ª–∏—Ç—å –≤ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏.
"""}]

##########
 
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
def userid_list():
    
    dff = pd.read_csv("/usr/src/app/dockerdata/ids.log", sep=";", header=0)
    dff = dff['ID']
    dff = dff.tolist()
    return dff
    print('====================== user {} –∑–∞–Ω–µ—Å—ë–Ω –≤ ids.log ======================'.format(message.from_user.id))
#------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# help
# function to handle the /help command
@bot.message_handler(commands=['help'], func=lambda message: message.from_user.id in userid_list())

def fn_main_help(message):
    print('====================== user {} fn_main_help start ======================'.format(message.from_user.id))
    print(' | message.from_user.id = ' + str(message.from_user.id) + ' | message.chat.id = ' + str(message.chat.id) + ' | message.text = ' + str(message.text))
    bot.send_chat_action(message.chat.id, 'typing')
    time.sleep(1)
    
    bot.send_message(message.chat.id, '\n–í –º–æ—ë–º –∞—Ä—Å–µ–Ω–∞–ª–µ –µ—Å—Ç—å —Å–ª–µ–¥—É—â–µ–µ üîΩüîΩüîΩ \n/issues - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏ \n/contacts - –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–∞–Ω–¥—ã \n/website - –†–µ—Å—É—Ä—Å—ã –∫–æ–º–ø–∞–Ω–∏–∏ \n/calendar - –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏ \n/help - –ü–æ–º–æ—â—å \n/wiki - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π \n–ê —Ç–∞–∫ –∂–µ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µüòä', reply_markup=hideBoard)
    print('====================== user {} fn_main_help end ======================'.format(message.from_user.id))
# start
# function to handle the /start command
@bot.message_handler(commands=['start'])
def fn_main(message):
    print('====================== user {} fn_main start ======================'.format(message.from_user.id))
    print('10' + ' | message.from_user.id = ' + str(message.from_user.id) + ' | message.chat.id = ' + str(message.chat.id) + ' | message.text = ' + str(message.text))
    mes = f'–ü—Ä–∏–≤–µ—Ç. –Ø –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–π –±–æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ –¶–¢–ò–¢–ü.'
    hello_mes = f'–¢–µ–ø–µ—Ä—å –º–Ω–µ –Ω—É–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —è–≤–ª—è–µ—à—å—Å—è –ª–∏ —Ç—ã —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–º –∫–æ–º–ø–∞–Ω–∏–∏...'
    bot.send_message(message.chat.id,mes, parse_mode='html')
    time.sleep(2)
    bot.send_message(message.chat.id,hello_mes, parse_mode='html')
    time.sleep(2)
    phone_btn = telebot.types.ReplyKeyboardMarkup(True, True)
    phone_btn.add(types.KeyboardButton(text='–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç', request_contact=True))
    msg = bot.send_message(message.chat.id, '–î–ª—è —ç—Ç–æ–≥–æ –Ω–∞–∂–º–∏ –∫–Ω–æ–ø–∫—É *–û—Ç–ø—Ä–∞–≤–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç* üëá –Ω–∏–∂–µ', parse_mode='Markdown',
                           reply_markup=phone_btn)
    bot.register_next_step_handler(msg,checking_access)
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------

def checking_access(message):
    time.sleep(1)
    print('====================== user {} checking_access start ======================'.format(message.from_user.id))
    if (message.contact is not None and message.from_user.id == message.contact.user_id):
        bot.send_message(message.chat.id, '–ü—Ä–æ–≤–µ—Ä—è—é –¥–æ—Å—Ç—É–ø ...', reply_markup=hideBoard)
        time.sleep(3)
        start_access(message, message.contact.phone_number)           
    else:
        bot.send_message(message.chat.id, '–í—ã –ø—Ä–∏—Å–ª–∞–ª–∏ –Ω–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç üòà', reply_markup=hideBoard)
    print('====================== user {} checking_access end ======================'.format(message.from_user.id))    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
        
def start_access(message, phone):
    print('====================== user {} start_access start ======================'.format(message.from_user.id))
    NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")
    df1["Phone"] = df1["Phone"].apply(str)
    df1["Phone"] = df1["Phone"].apply(lambda x: "+7" + ''.join(NUM_RE.match(x).groups()))
    adf1 = df1["Phone"]
    adf1 = adf1.tolist()
    print(adf1)
    func=lambda phone: phone in adf1
    ph = lambda x: "+7" + ''.join(NUM_RE.match(x).groups())
    if not adf1:#(func(ph(phone))):
        bot.send_message(message.chat.id,'–£ –í–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∏–ª–∏ –¥–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ωüòà', reply_markup=hideBoard)
    else:
        start_5(message, str(ph(phone)))
    print('====================== user {} start_access end ======================'.format(message.from_user.id))    
def start_5(message, phone):
    print('====================== user {} start_5 start ======================'.format(message.from_user.id))
    d1 = {'ID': [message.from_user.id], 'phone': [phone]}
    df = pd.DataFrame(d1)
    df.to_csv("/usr/src/app/dockerdata/ids.log", sep=";", mode='a', header=False)
    
    
    fileXLSX = '/usr/src/app/dockerdata/contact.xlsx'
    xlsx = pd.ExcelFile(fileXLSX)
    dfXLSX = xlsx.parse('contact')   
    NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")
    idx = dfXLSX.index[dfXLSX['Phone'].apply(lambda x: "+7" + ''.join(NUM_RE.match(x).groups())) == phone].values[0]
    dfXLSX.at[idx, 'TgId'] = message.from_user.id
    dfXLSX.to_excel(xlsx, "contact", index=False)
    xlsx = pd.ExcelFile(fileXLSX)
    dfXLSX = xlsx.parse('contact')
    print(dfXLSX)
    
    bot.send_message(message.chat.id, '–í—ã –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ —á–∞—Ç–±–æ—Ç–µ! \n–£ –º–µ–Ω—è –µ—Å—Ç—å —Å–ª–µ–¥—É—é—â–∏–µ –∫–æ–º–∞–Ω–¥—ã: \n/issues - –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞—è–≤–∫–∞—Ö –ø–æ–¥–¥–µ—Ä–∂–∫–∏ \n/contacts - –ö–æ–Ω—Ç–∞–∫—Ç—ã –∫–æ–º–∞–Ω–¥—ã \n/website - –†–µ—Å—É—Ä—Å—ã –∫–æ–º–ø–∞–Ω–∏–∏ \n/calendar - –ú–æ–∏ –≤—Å—Ç—Ä–µ—á–∏ \n/help - –ü–æ–º–æ—â—å \n/wiki - –ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π \n–ê —Ç–∞–∫ –∂–µ —è —Å —É–¥–æ–≤–æ–ª—å—Å—Ç–≤–∏–µ–º –æ—Ç–≤–µ—á—É –Ω–∞ —Ç–≤–æ–∏ –≤–æ–ø—Ä–æ—Å—ã. –î–ª—è —ç—Ç–æ–≥–æ –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –º–Ω–µüòä', reply_markup=hideBoard)
    print('====================== user {} start_5 end ======================'.format(message.from_user.id))
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# help
# function to handle the /contact command
@bot.message_handler(commands=['contacts'], func=lambda message: message.from_user.id in userid_list())
def fn_main_contact(message):
    print('====================== user {} fn_main_contact start ======================'.format(message.from_user.id))
    markup = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("‚úã –û—Ç–º–µ–Ω–∞")
    markup.add(btn1)
    msg = bot.send_message(message.chat.id, "–£–º–µ—é –∏—Å–∫–∞—Ç—å –ø–æ —Ñ–∞–º–∏–ª–∏–∏, e-mail, –º–æ–±–∏–ª—å–Ω–æ–º—É –∏ —Ä–∞–±–æ—á–µ–º—É —Ç–µ–ª–µ—Ñ–æ–Ω—É(+7 (98*)). –§–∞–º–∏–ª–∏—é –ø–∏—à–∏ –≤ –∏–º–µ–Ω–∏—Ç–µ–ª—å–Ω–æ–º –ø–∞–¥–µ–∂–µ, –∞ –ø–æ—á—Ç—É –ø–æ–ª–Ω–æ—Å—Ç—å—é üëá–ù–∞–ø—Ä–∏–º–µ—Ä, –ò–≤–∞–Ω–æ–≤ –∏–ª–∏ Ivanov@gp.ru", reply_markup=markup)
    bot.register_next_step_handler(msg, fn3, '', '', '')
        
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
def fn3(message, v_phone, v_firstname, v_lastname):
    if (message.text == "‚úã –û—Ç–º–µ–Ω–∞"):
        bot.send_message(message.chat.id, '–ú–æ–∂–µ—Ç –±—ã—Ç—å –≤ –¥—Ä—É–≥–æ–π —Ä–∞–∑ üòâ', parse_mode='html', reply_markup=hideBoard)
    elif (message.text == "–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç"):
        bot.send_contact(message.chat.id, phone_number=v_phone, first_name=v_firstname,last_name=v_lastname, reply_markup=hideBoard)
    elif (message.text == "–ù–∞–π—Ç–∏ –µ—â—ë"):
        fn_main_contact(message)
    elif (message.text == "–°–ø–∞—Å–∏–±–æ"):
        bot.send_message(message.chat.id, '–û–±—Ä–∞—â–∞–π—Å—è üòä', parse_mode='html', reply_markup=hideBoard)
    elif (message.text == "–î–∞"):
        fn_main_contact(message)
    else:
        fn_contact_find(message)
    #elif v_step == 2:
    #    fn_contact_find(message)
    #elif v_step == 1:
    #    bot.send_message(message.chat.id, '–ò–∑–≤–∏–Ω–∏, —è —Ç–µ–±—è –Ω–µ –ø–æ–Ω—è–ª. –ï—Å–ª–∏ —á—Ç–æ, —É –º–µ–Ω—è –µ—Å—Ç—å /help', parse_mode='html')
        
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
    
def fn_contact_find(message):
    markup1 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn1 = types.KeyboardButton("–°–æ—Ö—Ä–∞–Ω–∏—Ç—å –∫–æ–Ω—Ç–∞–∫—Ç")
    btn2 = types.KeyboardButton("–ù–∞–π—Ç–∏ –µ—â—ë")
    btn3 = types.KeyboardButton("–°–ø–∞—Å–∏–±–æ")
    markup1.add(btn1, btn2, btn3)

    markup2 = types.ReplyKeyboardMarkup(resize_keyboard=True, one_time_keyboard=True)
    btn4 = types.KeyboardButton("–î–∞")
    btn5 = types.KeyboardButton("‚úã –û—Ç–º–µ–Ω–∞")
    markup2.add(btn4, btn5)

    f1 = ''
    flag = 0 # 1 - email 2 phone 3 Surname 4 Surname_eng
    mess = message.text.strip().lower()

    messphone = mess.replace("+", "").replace("(", "").replace(")", "").replace("-", "").replace(" ", "")

    v_phone = '' 
    v_lastname = ''
    v_firstname = ''
    
    #eng = re.compile(r"^[a-zA-Za]+$")

    if "@" in mess:
        flag = 1
        for i in df1['Email']:
            if i.lower().strip() == mess:
                f1 = i
    elif messphone.isdigit():
        NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")
        ph = lambda x: "+7" + ''.join(NUM_RE.match(x).groups())
        messphone = ph(messphone)
        flag = 2
        for i in df1['Phone'].apply(str).apply(lambda x: "+7" + ''.join(NUM_RE.match(x).groups())):
            if i == messphone:
                f1 = i   
    elif '–∞' <= mess <= '—è':
        flag = 3
        for i in df1['Surname']:
            if i.strip().lower() == mess:
                f1 = i
    elif 'a' <= mess <= 'z':
        flag = 4
        for i in df1['Surname_eng']:
            if i.strip().lower() == mess:
                f1 = i
    if f1 == '' and flag == 0:
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ —Å–º–æ–≥ –Ω–∞–π—Ç–∏ –∫–æ–ª–ª–µ–≥—É –ø–æ –∑–∞–ø—Ä–æ—Å—É <b>{message.text}</b>. –ó–∞–ø—Ä–æ—Å <b> {message.text}</b> –Ω–µ –ø–æ—Ö–æ–∂ –Ω–∞ email, —Ç–µ–ª–µ—Ñ–æ–Ω –∏–ª–∏ —Ñ–∞–º–∏–ª–∏—é ‚Äì –≤–æ–∑–º–æ–∂–Ω–æ –∑–∞–∫—Ä–∞–ª–∞—Å—å –æ—à–∏–±–∫–∞.üí¢ –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    elif flag == 1 and f1 != '':
        m = ''
        d = df1[df1['Email'] == f1]
        for index, row in d.iterrows():
            v_phone =  str(row['Phone']).strip()
            v_lastname = str(row['Surname']).strip()
            v_firstname = str(row['Name']).strip()
            m += '\n\n' + str(row['Surname']).strip() + ' ' + str(row['Name']).strip() + '\n' + str(row['Department']).strip()  + '\n' + '–ú–æ–±–∏–ª—å–Ω—ã–π: ' + str(row['Phone']).strip() + '\n' + 'E-mail: ' + str(row['Email']).strip() + '\n\n'
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>email</b>: {m} –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? /contact', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, fn3, v_phone, v_lastname, v_firstname)
    elif flag == 2 and f1 != '':
        NUM_RE = re.compile(r".*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*(\d).*")
        m = ''
        d = df1[df1['Phone'].apply(str).apply(lambda x: "+7" + ''.join(NUM_RE.match(x).groups())) == f1]
        for index, row in d.iterrows():
            v_phone =  str(row['Phone']).strip()
            v_lastname = str(row['Surname']).strip()
            v_firstname = str(row['Name']).strip()
            m += '\n\n' + str(row['Surname']).strip() + ' ' + str(row['Name']).strip() + '\n' + str(row['Department']).strip()  + '\n' + '–ú–æ–±–∏–ª—å–Ω—ã–π: ' + str(row['Phone']).strip() + '\n' + 'E-mail: ' + str(row['Email']).strip() + '\n\n'
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>–Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b>: {m} –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? /contact', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, fn3, v_phone, v_lastname, v_firstname)
    elif flag == 3 and f1 != '':
        m = ''
        d = df1[df1['Surname'] == f1]
        for index, row in d.iterrows():
            v_phone = str(row['Phone']).strip()
            v_lastname = str(row['Surname']).strip()
            v_firstname = str(row['Name']).strip()
            m += '\n\n' + str(row['Surname']).strip() + ' ' + str(row['Name']).strip() + '\n' + str(row['Department']).strip()  + '\n' + '–ú–æ–±–∏–ª—å–Ω—ã–π: ' + str(row['Phone']).strip() + '\n' + 'E-mail: ' + str(row['Email']).strip() + '\n\n'
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>—Ñ–∞–º–∏–ª–∏–∏</b>: {m} –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? /contact', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, fn3, v_phone, v_lastname, v_firstname)
    elif flag == 4 and f1 != '':
        m = ''
        d = df1[df1['Surname_eng'] == f1]
        for index, row in d.iterrows():
            v_phone = str(row['Phone']).strip()
            v_lastname = str(row['Surname_eng']).strip()
            v_firstname = str(row['Name']).strip()
            m += '\n\n' + str(row['Surname_eng']).strip() + ' ' + str(row['Name']).strip() + '\n' + str(row['Department']).strip()  + '\n' + '–ú–æ–±–∏–ª—å–Ω—ã–π: ' + str(row['Phone']).strip() + '\n' + 'E-mail: ' + str(row['Email']).strip() + '\n\n'
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>—Ñ–∞–º–∏–ª–∏–∏</b>: {m} –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑? /contact', parse_mode='html', reply_markup=markup1)
        bot.register_next_step_handler(msg, fn3, v_phone, v_lastname, v_firstname)
    #–µ—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∞—Ç—Ä–∏–±—É—Ç—É
    elif flag == 1 and f1 == '':
        m = df1[df1['Email'] == f1]
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>email</b> <b>{message.text}</b> –∏–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    elif flag == 2 and f1 == '':
        m = df1[df1['Phone'] == f1]
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>–Ω–æ–º–µ—Ä—É —Ç–µ–ª–µ—Ñ–æ–Ω–∞</b> <b>{message.text}</b> –∏–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    elif flag == 3 and f1 == '':
        m = df1[df1['Surname'] == f1]
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>—Ñ–∞–º–∏–ª–∏–∏</b> <b>{message.text}</b> –∏–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    elif flag == 4 and f1 == '':
        m = df1[df1['Surname_eng'] == f1]
        msg = bot.send_message(message.chat.id, f'–Ø –Ω–µ –Ω–∞—à—ë–ª –∫–æ–ª–ª–µ–≥—É –ø–æ <b>—Ñ–∞–º–∏–ª–∏–∏</b> <b>{message.text}</b> –∏–∑ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–µ–º –µ—â–µ —Ä–∞–∑?', parse_mode='html', reply_markup=markup2)
        bot.register_next_step_handler(msg, fn3, '', '', '')
    
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# website
# function to handle the /website command
@bot.message_handler(commands=['website'], func=lambda message: message.from_user.id in userid_list())
def fn_main_website(message):
    markup1 = types.InlineKeyboardMarkup()
    markup1.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ ctitp.ru", url="https://ctitp.ru/"))
    bot.send_message(message.chat.id, "–°–∞–π—Ç ctitp.ru", reply_markup=markup1)

    markup2 = types.InlineKeyboardMarkup()
    markup2.add(types.InlineKeyboardButton("–ü–µ—Ä–µ–π—Ç–∏ –Ω–∞ wiki", url="https://wiki.yandex.ru/"))
    bot.send_message(message.chat.id, "–í–∏–∫–∏", reply_markup=markup2)

#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# calendar
# function to handle the /calendar command
@bot.message_handler(commands=['calendar'], func=lambda message: message.from_user.id in userid_list())
       
def fn_main_calendar(message):

    from datetime import datetime,timedelta
    import icalendar
    import recurring_ical_events
    import urllib.request
    
    
    file = '/usr/src/app/dockerdata/contact.xlsx'
    xlsx = pd.ExcelFile(file)
    df = xlsx.parse('contact')
    dd = df[df['TgId'] == message.from_user.id]
    for emp in dd.items():
        
        if emp == dd.empty:
            print('–í—ã –Ω–µ –æ—Ç–ø—Ä–∞–≤–∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–ª–µ–Ω–¥–∞—Ä—é')
        else:
            print(emp)
            
    else:        
        url = dd['ICal'].values[0]       
        
    dict_url = {}
    dict_url["u"] = url
    get_url = dict_url.get('u')
    print(get_url)
    
    #–°–µ–≥–æ–¥–Ω—è
    start_date = datetime.now()
    end_date =   date.today() + timedelta(days=1)
        
    ical_string = urllib.request.urlopen(get_url).read()
    calendar = icalendar.Calendar.from_ical(ical_string)
    events = recurring_ical_events.of(calendar).between(start_date, end_date)
    
    markup = types.InlineKeyboardMarkup()
    button_text = ''
    
    if events == []:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á —Å–µ–≥–æ–¥–Ω—è", parse_mode='html', reply_markup=hideBoard)
    else:
        
        for event in events:
            start = event["DTSTART"].dt
            summary = event["SUMMARY"]
            url = event["URL"]
            lastmodified = event["LAST-MODIFIED"].dt
            duration = event["DTEND"].dt - event["DTSTART"].dt
            #print("start {} summary {} url {} last-modified {}".format(start, summary, url, lastmodified))
            button_text = (start.strftime('%d.%m %H:%M') + ' - ' + event["DTEND"].dt.strftime('%H:%M') + '. ' + str(summary or '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')).ljust(100, ' ')
            markup.add(types.InlineKeyboardButton(button_text, url=url)) 
        
        bot.send_message(message.chat.id, '–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è:', reply_markup=markup)
        
    #–ó–∞–≤—Ç—Ä–∞
    start_date = date.today() + timedelta(days=1)
    end_date =   date.today() + timedelta(days=2)


    ical_string = urllib.request.urlopen(get_url).read()
    calendar = icalendar.Calendar.from_ical(ical_string)
    events = recurring_ical_events.of(calendar).between(start_date, end_date)
    
    markup = types.InlineKeyboardMarkup()
    button_text = ''
    
    if events == []:
        bot.send_message(message.chat.id, "–£ –≤–∞—Å –Ω–µ—Ç –≤—Å—Ç—Ä–µ—á –∑–∞–≤—Ç—Ä–∞", parse_mode='html', reply_markup=hideBoard)
    else:
    
        for event in events:
            start = event["DTSTART"].dt
            summary = event["SUMMARY"]
            url = event["URL"]
            lastmodified = event["LAST-MODIFIED"].dt
            duration = event["DTEND"].dt - event["DTSTART"].dt
            #print("start {} summary {} url {} last-modified {}".format(start, summary, url, lastmodified))
            button_text = (start.strftime('%d.%m %H:%M') + ' - ' + event["DTEND"].dt.strftime('%H:%M') + '. ' + str(summary or '–ù–µ—Ç –Ω–∞–∑–≤–∞–Ω–∏—è')).ljust(100, ' ')
            markup.add(types.InlineKeyboardButton(button_text, url=url)) 
        
        bot.send_message(message.chat.id, '–í–∞—à–∏ –≤—Å—Ç—Ä–µ—á–∏ –Ω–∞ –∑–∞–≤—Ç—Ä–∞:', reply_markup=markup)
              
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# issues
# function to handle the /issues command

@bot.message_handler(commands=['wiki'], func=lambda message: message.from_user.id in userid_list())
def fn_main_wiki(message):

    lists = [ 
        {
    'txt':'–†–µ–≥–ª–∞–º–µ–Ω—Ç —Ä–∞–±–æ—Ç—ã –¶–¢–ò–¢–ü —Å –ó–∞–∫–∞–∑—á–∏–∫–∞–º–∏',
    'url':'https://disk.yandex.ru/i/u0BOtAEXHJONTw'
        },
        {
    'txt':'–ë–ª–∞–Ω–∫ –∏—Å—Ö–æ–¥—è—â–µ–≥–æ –ø–∏—Å—å–º–∞',
    'url':'https://disk.yandex.ru/i/JZjqY5WoYtxEQw'
        },
        {
    'txt':'–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¶–¢–ò–¢–ü',
    'url':'https://disk.yandex.ru/i/Tdsa3hsGxEA_Xg'
        },
        {
    'txt':'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_–¥–æ—Å—Ç—É–ø –∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è–º',
    'url':'https://disk.yandex.ru/i/yRvYl14axN3chw'
        },
        {
    'txt':'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç_—Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞ SLA —Å—Ç–∞–Ω–¥–∞—Ä—Ç',
    'url':'https://disk.yandex.ru/i/hHsgHYBpgauG7g'
        },
        {
    'txt':'–ê–∫—Ç –Ω–∞ —É—Å–ª—É–≥–∏_—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —á–∞—Å–∞',
    'url':'https://disk.yandex.ru/i/RJ7V7OpVP7kB4Q'
        },
        {
    'txt':'–ó–∞—è–≤–∫–∞ –Ω–∞ —É—Å–ª—É–≥–∏_—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —á–∞—Å–∞',
    'url':'https://disk.yandex.ru/i/Onq7GXvVtNtoDA'
        },
        {
    'txt':'–¶–¢–ò–¢–ü__—Ä–∞–º–æ—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä —É—Å–ª—É–≥_—Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç–∞–≤–∫–∞ —á–∞—Å–∞',
    'url':'https://disk.yandex.ru/i/t5MJnIaEckcPtQ'
        },
        {
    'txt':'–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–∞–±–∏–Ω–µ—Ç–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –∫–ª–∏–µ–Ω—Ç–∞',
    'url':'https://disk.yandex.ru/i/6jX8rD-M6jsxRA'
        },
        {
    'txt':'–î–æ–≥–æ–≤–æ—Ä –Ω–∞ —É—Å–ª—É–≥–∏_–∞–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞',
    'url':'https://disk.yandex.ru/i/372fjJiv7_tyhg'
        },
        {
    'txt':'–ê–∫—Ç —Å–¥–∞—á–∏-–ø—Ä–∏–µ–º–∫–∏ —É—Å–ª—É–≥_–∞–±–æ–Ω–µ–Ω—Ç—Å–∫–∞—è —Å—Ç–∞–≤–∫–∞',
    'url':'https://disk.yandex.ru/i/F58dKBgboE4SiQ'
        },
        {
    'txt':'–†–∞–º–æ—á–Ω—ã–π –¥–æ–≥–æ–≤–æ—Ä –Ω–∞ —É—Å–ª—É–≥–∏_–∑–∞–∫–∞–∑—ã',
    'url':'https://disk.yandex.ru/i/dMg9tO5bvWX6Iw'
        },
        {
    'txt':'–ó–∞–∫–∞–∑ –∫ —Ä–∞–º–æ—á–Ω–æ–º—É –¥–æ–≥–æ–≤–æ—Ä—É –Ω–∞ —É—Å–ª—É–≥–∏',
    'url':'https://disk.yandex.ru/i/Hb90pjP5z0FuXg'
        },        
        {
    'txt':'–§–∞–π–ª—ã –ø–∞–π–ø–ª–∞–π–Ω ',
    'url':'https://disk.yandex.ru/client/disk/CTITP/–§–∞–π–ª—ã%20–ø–∞–π–ø–ª–∞–π–Ω'
        },
        {
    'txt':'–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã –∫–æ–º–ø–∞–Ω–∏–∏',
    'url':'https://disk.yandex.ru/client/disk/CTITP/–î–æ–∫—É–º–µ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ%20–¥–µ—è—Ç–µ–ª—å–Ω–æ—Å—Ç–∏%20–¶–¢–ò–¢–ü/–ì—Ä–∞—Ñ–∏—á–µ—Å–∫–∏–µ%20–º–∞—Ç–µ—Ä–∏–∞–ª—ã%20–∫–æ–º–ø–∞–Ω–∏–∏'
        },
        {
    'txt':'–®–∞–±–ª–æ–Ω –¥–æ–≥–æ–≤–æ—Ä–∞ –Ω–∞ –¥–æ—Å—Ç—É–ø –∫ –ø–æ—Ä—Ç–∞–ª—É',
    'url':'https://disk.yandex.ru/i/UXuauNf0_Wqa6w'
        },
        {
    'txt':'–ü—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏—è –¶–¢–ò–¢–ü',
    'url':'https://disk.yandex.ru/i/xLDtLgmBA4ORvg'
        },
        {
    'txt':'–°–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã IBM',
    'url':'https://disk.yandex.ru/client/disk/CTITP_%D0%9F%D0%A0%D0%9E%D0%98%D0%97%D0%92%D0%9E%D0%94%D0%A1%D0%A2%D0%92%D0%9E/%D0%A1%D0%B5%D1%80%D1%82%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82%D1%8B/IBM'
        },
        {
    'txt':'–î—Ä—É–≥–∏–µ —Å–µ—Ä—Ç–∏—Ñ–∏–∫–∞—Ç—ã',
    'url':'https://disk.yandex.ru/client/disk/CTITP_%D0%9F%D0%A0%D0%9E%D0%98%D0%97%D0%92%D0%9E%D0%94%D0%A1%D0%A2%D0%92%D0%9E/%D0%A1%D0%B5%D1%80%D1%82%D0%B8%D1%84%D0%B8%D0%BA%D0%B0%D1%82%D1%8B/Other'
        },
    ]
    
    keyboard = types.InlineKeyboardMarkup()
    for list in lists:
        text = list.get("txt")
        url = list.get("url")
        btn = types.InlineKeyboardButton(text=text,url = url)
        keyboard.add(btn)
    bot.send_message(message.from_user.id, text='–ë–∞–∑–∞ –∑–Ω–∞–Ω–∏–π', reply_markup=keyboard)
        
    
    
# @bot.message_handler(commands=['statistics'], func=lambda message: message.from_user.id in userid_list())
# def fn_main_statistics(message):
    # from redminelib import Redmine
    # from datetime import datetime
    
    # bords = [
        
        # {
    # 'url':'https://service.labvs.ru/',
    # 'key':'e51dfcc1c8a8bcccdc3e4a4134bbc538bd304933'
        # },
        # {
    # 'url':'https://ets.dionaholding.ru/',
    # 'key':'796b684ed73b1a9d2d987002e79ba67bc54c7bff'
        # },
        # {
    # 'url':'https://support.ctitp.ru/',
    # 'key':'ea9b90a90862f8ea6cb30ffa578ba2315a57dfb1'
        # },
    # ]

    # for bord in bords:
        # url =bord.get("url")
        # key = bord.get("key")
        # redmine = Redmine(url=url,key = key)    
    
    
        # project = redmine.project.all()
        # for project in redmine.project.all():
        
            # project_name = project.name 
            # issues = redmine.issue.filter(project_id=project.identifier, status_id = '*', sort='id:asc')
            # issues_list = list(issues)
            # print(issues_list)
            
          
          
          
          
@bot.message_handler(commands=['push'], func=lambda message: message.from_user.id in userid_list())
def fn_push_menu(message):
    
    
    bords = [
    {
    'choose_yes':'–ó–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏',
    'choose_no':'–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö'
    }
   
    ]
    for bord in bords:
        choose_yes = bord.get('choose_yes')
        choose_no = bord.get('choose_no')
        yes = types.KeyboardButton(choose_yes)
        no = types.KeyboardButton(choose_no)
    
    file = '/usr/src/app/dockerdata/contact.xlsx'
    xlsx = pd.ExcelFile(file)
    df = xlsx.parse('contact')
    dd = df[df['TgId'] == message.from_user.id]
    for values in dd.items():
        push_call = dd['PushCall'].values[0]
        push_issue = dd['PushIssue'].values[0]
        
    push_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
    btn_yes = yes
    btn_no = no
    push_markup.add(btn_yes, btn_no)
    msg = bot.send_message(message.chat.id, '–ó–¥–µ—Å—å —Ç—ã —Å–º–æ–∂–µ—à—å –≤—ã–±—Ä–∞—Ç—å –æ —á—ë–º —è –±—É–¥—É —Ç–µ–±—è —É–≤–µ–¥–æ–º–ª—è—Ç—å üòä', reply_markup=push_markup)
    bot.register_next_step_handler(msg, fn_call_and_issue)
    
    
    
    
def fn_call_and_issue(message):
    if (message.text == '–£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤—Å—Ç—Ä–µ—á–∞—Ö'):
        call_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        call_btn_yes = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ'
        call_btn_no = '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è‚ùå'
        call_markup.add(call_btn_yes,call_btn_no)
                         
        msg_call = bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –æ –≤–∞—à–∏—Ö –≤—Å—Ç—Ä–µ—á–∞—Ö?', reply_markup = call_markup)        
        
        bot.register_next_step_handler(msg_call, fn_answer_call)
    elif (message.text == '–ó–∞—è–≤–∫–∏ –ø–æ–¥–¥–µ—Ä–∂–∫–∏'):
        issue_markup = types.ReplyKeyboardMarkup(resize_keyboard=True)
        issue_btn_yes = '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ'
        issue_btn_no = '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è‚ùå'
        issue_markup.add(issue_btn_yes,issue_btn_no)
       
        msg_issue = bot.send_message(message.chat.id, '–•–æ—Ç–∏—Ç–µ –ª–∏ –≤—ã –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è c –ø–æ—Ä—Ç–∞–ª–æ–≤ –ø–æ–¥–¥–µ—Ä–∂–∫–∏?', reply_markup = issue_markup)   
        
        bot.register_next_step_handler(msg_issue, fn_answer_issue)
       
def fn_answer_call(message):
    
    if (message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ'):
        file = '/usr/src/app/dockerdata/contact.xlsx'
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        dd = df.index[df['TgId'] == message.from_user.id].values[0]
        df.at[dd, 'PushCall'] = 1
        df.to_excel(xlsx, "contact", index=False)
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞‚úÖ", parse_mode='html', reply_markup=hideBoard)
    
    elif (message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è‚ùå'):
        file = '/usr/src/app/dockerdata/contact.xlsx'
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        dd = df.index[df['TgId'] == message.from_user.id].values[0]
        df.at[dd, 'PushCall'] = 0
        df.to_excel(xlsx, "contact", index=False)
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞‚ùå", parse_mode='html', reply_markup=hideBoard)

def fn_answer_issue(message):   
    if (message.text == '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è‚úÖ'):
        file = '/usr/src/app/dockerdata/contact.xlsx'
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        dd = df.index[df['TgId'] == message.from_user.id].values[0]
        df.at[dd, 'PushIssue'] = 1
        df.to_excel(xlsx, "contact", index=False)
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∞‚úÖ", parse_mode='html', reply_markup=hideBoard)
    
    elif (message.text == '–û—Ç–ø–∏—Å–∞—Ç—å—Å—è‚ùå'):
        file = '/usr/src/app/dockerdata/contact.xlsx'
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        dd = df.index[df['TgId'] == message.from_user.id].values[0]
        df.at[dd, 'PushIssue'] = 0
        df.to_excel(xlsx, "contact", index=False)
        xlsx = pd.ExcelFile(file)
        df = xlsx.parse('contact')
        bot.send_message(message.chat.id, "–ü–æ–¥–ø–∏—Å–∫–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞‚ùå", parse_mode='html', reply_markup=hideBoard)
    

@bot.message_handler(commands=['issues'], func=lambda message: message.from_user.id in userid_list())
def fn_main_issues(message):
    from redminelib import Redmine
    from datetime import datetime
    
    bords = [
        
        {
    'url':'https://service.labvs.ru/',
    'key':'e51dfcc1c8a8bcccdc3e4a4134bbc538bd304933'
        },
        {
    'url':'https://ets.dionaholding.ru/',
    'key':'796b684ed73b1a9d2d987002e79ba67bc54c7bff'
        },
        {
    'url':'https://support.ctitp.ru/',
    'key':'ea9b90a90862f8ea6cb30ffa578ba2315a57dfb1'
        },
    ]

    for bord in bords:
        url =bord.get("url")
        key = bord.get("key")
        redmine = Redmine(url=url,key = key)    
        
        project = redmine.project.all()        
        current = datetime.now()
        try:       
            for project in redmine.project.all():
                if project.name == '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞':
                    project_name = '–¢–µ—Ö–ø–æ–¥–¥–µ—Ä–∂–∫–∞ (–î—É–±–ª–∏ –¥–ª—è L1)'
                else:
                    project_name = project.name
                issues = redmine.issue.filter(project_id=project.identifier, sort='id:asc')
                issues_list = list(issues)
                number_of_elements = len(issues_list)
                if (not issues_list) or (project.name == '–°–æ–ø—Ä–æ–≤–æ–∂–¥–µ–Ω–∏–µ'):
                    continue
                else:
                    markup = types.InlineKeyboardMarkup()
                    for case in issues:
                        case_id = str(case.id)
                        case_updated_on = case.updated_on
                        
                        update_date = case_updated_on.strftime("%d.%m.%Y. %H:%M")
                        case_assigned_to = str(case.assigned_to).replace(" (–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∏–π –∏–Ω–∂–µ–Ω–µ—Ä)", "")
                        case_priority = str(case.priority)
                        
                        if case_priority == '4 –ù–∏–∑–∫–∏–π':
                            case_priority = '‚ö™'
                        elif case_priority == '3 –°—Ä–µ–¥–Ω–∏–π':
                            case_priority = 'üü°'
                        elif case_priority == '2 –í—ã—Å–æ–∫–∏–π':
                            case_priority = 'üü†'
                        elif case_priority == '1 –ö—Ä–∏—Ç–∏—á–Ω—ã–π (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥)':
                            case_priority = 'üî¥'
                        else: case_priority = '‚ö´'
                      
                        diff = current - case_updated_on                    
                        
                        if diff.days >= 3:
                            diffmsg = ' - –ø—Ä–æ—Å—Ä–æ—á–µ–Ω–∞'
                        elif diff.days >= 2:
                            diffmsg = ' - –∏—Å—Ç–µ–∫–∞–µ—Ç —Å—Ä–æ–∫'
                        else:
                            diffmsg = ''
                        
                        button_text = case_priority + " ‚Ññ " + case_id + " " + case_assigned_to + diffmsg + " | –ò–∑–º. " + str(update_date) 
                        
                        markup.add(types.InlineKeyboardButton(button_text, url=url + 'issues/' + str(case.id)))
                    bot.send_message(message.chat.id, str(project_name) + ''', –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ  –æ—Ç–∫—Ä—ã—Ç—ã—Ö –∑–∞—è–≤–æ–∫ - '''  + str(number_of_elements), reply_markup=markup)
                    time.sleep(1)
        except:
            bot.send_message(message.chat.id, "–ü–æ—Ä—Ç–∞–ª {} –Ω–µ –æ—Ç–≤–µ—á–∞–µ—Ç. –°–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø–æ—Ä—Ç–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ –ø–æ–¥–¥–µ—Ä–∂–∫—É".format(url), parse_mode='html', reply_markup=hideBoard)
            pass
    bot.send_message(message.chat.id, '‚ö™Ô∏è - 4 –ù–∏–∑–∫–∏–π\nüü° - 3 –°—Ä–µ–¥–Ω–∏–π\nüü† - 2 –í—ã—Å–æ–∫–∏–π\nüî¥ - 1 –ö—Ä–∏—Ç–∏—á–Ω—ã–π\n‚ö´Ô∏è - –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –Ω–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω', parse_mode='html', reply_markup=hideBoard)
    

    
        
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#
#
#
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
#---------------------------------------------------------------------------------------------------------------------------------------------------------------------
# other text
# function to handle the "other text"
@bot.message_handler(content_types=["text"])
def repeat_all_messages(message):
    import openai
    
    print('1' + ' | ' + str(message.from_user.id) + ' | ' + str(message.chat.id) + ' | ' + str(message.text))
    
    func=lambda x: x in userid_list()
    if not(func(message.from_user.id)):
        fn_main_start(message)
    else:
    
        #–î–∞–Ω–∏–ª–æ–≤—Å–∫–∏–π –î–∞–Ω–∏–ª–∞	- 346573500
        #–ö–æ–ª—å—Ü–æ–≤ –ê–ª–µ–∫—Å–∞–Ω–¥—Ä	- 5065375376
        #–õ–µ–æ–Ω—Ç—å–µ–≤ –î–º–∏—Ç—Ä–∏–π	- 500683099
        #–ú–∞–ª—å—Ü–µ–≤ –ê–ª–µ–∫—Å–µ–π	- 402431402
        #–ü–æ–ª–∏—Ä–æ–≤ –î–º–∏—Ç—Ä–∏–π	- 218714164
        
        
        if (message.from_user.id == 218714164 or message.from_user.id == 346573500 or message.from_user.id == 5065375376 or message.from_user.id == 500683099 or message.from_user.id == 402431402):
            user_id = str(message.from_user.id)
            user = _get_user(user_id)
            rq = str(message.text)

            if time.time() - user['last_prompt_time'] > 60*60:
                user['last_prompt_time'] = 0
                user['history'] = _get_clear_history(user_id)
                
            if rq and len(rq) > 0 and len(rq) < 3000:
                user['history'].append({"role": "user", "content": rq})
            
            print(user['history'])
            bot.send_chat_action(message.chat.id, 'typing')
            
            model_engine = "gpt-3.5-turbo"
                        
            openai.api_key = "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"
            completion = openai.ChatCompletion.create(model=model_engine, messages=user['history'], temperature=0.5)
            ans = completion['choices'][0]['message']['content']
            
            user['history'].append({"role": "assistant", "content": ans})
            user['last_prompt_time'] = time.time()
            
            print(user['history'])

            # Save users using utf-8 and beatur format
            with open(file_user_json, "w") as f:
                json.dump(users, f, indent=4, ensure_ascii=False)
            
            bot.send_message(message.chat.id, text = ans, reply_markup=hideBoard)
            
        else:
            msgs_start = ['/start']
            msgs_wifi  = ['/wifi']
            msgs_help  = ['/help']
            msgs_thx   = ['–°–ø–∞—Å–∏–±–æ!', '—Å–ø–∞—Å–∏–±–æ!', '–°–ø–∞—Å–∏–±–æ', '—Å–ø–∞—Å–∏–±–æ', '–°–ø—Å', 'c–ø—Å', 'thx', 'thanks', '—Å–ø–∞—Å–∏–±', '–ø–∞—Å–∏–±']
            msgs_hello = ['–ü—Ä–∏–≤–µ—Ç','–ø—Ä–∏–≤–µ—Ç','hi','hello','–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π']
            if message.text in msgs_thx:
                print('7' + ' | ' + str(message.from_user.id) + ' | ' + str(message.chat.id) + ' | ' + str(message.text))
                rply_list = ['–ü–æ–∂–∞–ª—É–π—Å—Ç–∞', '–†–∞–¥ —Å—Ç–∞—Ä–∞—Ç—å—Å—è!üòè ', '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞ üòá']
                random_index = random.randint(0, len(rply_list) - 1)
                bot.send_message(message.chat.id, rply_list[random_index], reply_markup=hideBoard)
            elif message.text in msgs_hello:
                print('19' + ' | ' +  str(message.from_user.id) + ' | ' + str(message.chat.id) + ' | ' + str(message.text))
                bot.send_message(message.chat.id, '–ü—Ä–∏–≤–µ—Ç!', reply_markup=hideBoard)
            


if __name__ == '__main__':
    print('0' + ' | ' + str('Start TG BOT') + ' | ' + str(' ') + ' | ' + str(' '))  
    
    bot.infinity_polling()
    


